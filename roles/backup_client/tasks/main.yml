---
# This role will install Duply to perform automated backups.
# It is meant to be used with the corresponding backup_server
# role

- name: Install duply package
  apt: pkg=duply state=present

- name: Create /etc/duply/default directory
  file: >
    dest=/etc/duply/default
    state=directory
    owner=root
    group=root
    mode=0700
#     recurse=yes

- name: Copy GnuPG key pair file
  copy: >
    src={{ backups_prep_directory }}/gpgkeys.asc
    dest=/etc/duply/default/
    owner=root
    group=root
    mode=0600
  notify:
    - Import GnuPG keys

# This task uses the duply_profile_template_directory variable
# to allow the user to prefix a path to a directory containing the
# files listed under with_items. All 4 files must exist at this path.
# The path listed in duply_profile_template_directory must end with
# a '/' for this to work.
# TODO: make it work with or without the slash. Possibly using a 
# default variable that applies the path filter and supplies a default
# value that is an empty string.
- name: Copy Duply default profile j2 templates
  template: >
    src={{ backups_duply_profile_template_directory }}{{ item }}.j2
    dest=/etc/duply/default/{{ item }}
    owner=root
    group=root
    mode=0600
  with_items:
    - conf
    - exclude
    - pre
    - post

# This task registers its result as root_ssh_key.
# The variable is used by the archive role, which must
# always run after the backups role for this variable to be
# available.
# TODO: consider fetching the key to a local file that can
# be used by the archive role instead.
- name: Generate ssh key for root
  user: >
    name=root
    generate_ssh_key=yes
  register: root_ssh_key

- debug: var=root_ssh_key.ssh_public_key

# This complicated looking task has the goal of adding the backup
# server's SSH host key to root's known_hosts files. Without
# the host key, root cannot connect to the backup server without a prompt.
# If the backup server's SSH key ever changes this task should also
# update root's known_hosts.
# This is assumed to be safe because if the SSH key has changed there
# will also be warnings on the local computer executing Ansible. The values
# are also logged using the debug actions below.
- name: Add backup target's SSH host key to /root/.ssh/known_hosts
  lineinfile: >
    dest=/root/.ssh/known_hosts
    create=yes
    mode=0600
    regexp="^{{ item }}"
    line="{{ item  + ' ' +  backups_target_ssh_host_key_type + ' ' + backups_target_ssh_host_key }}"
  with_items:
    - "{{ backups_target_hostname }}"
    - "{{ backups_target_ip + ',' + backups_target_hostname }}"

# " So that the values are logged:
- debug: var=backups_target_ssh_host_key_type
- debug: var=backups_target_hostname
- debug: var=backups_target_ip
- debug: var=backups_target_ssh_host_key

- name: Add nightly Duply backup to cron
  cron: >
    name=duply_nightly
    hour=3
    minute=10
    job="duply default backup"
    user=root
    state=present

- name: Add weekly Duply full backup to cron
  cron: >
    name=duply_weekly
    hour=5
    minute=0
    weekday=0
    job="duply default full"
    user=root
    state=present

- name: Add weekly Duply purge of old backups to cron
  cron: >
    name=duply_purge
    hour=2
    minute=0
    weekday=4
    job="duply default purge-full --force"
    user=root
    state=present

